// <auto-generated />
using System;
using InteractHealthProDatabase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InteractHealthProDatabase.Data.Migrations
{
    [DbContext(typeof(IhpDbContext))]
    [Migration("20230223183315_CheckBoxesmedicalHistory")]
    partial class CheckBoxesmedicalHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("ClientSequence");

            modelBuilder.HasSequence("HealthCompanyContactSequence");

            modelBuilder.HasSequence("InsuranceCompanyContactSequence");

            modelBuilder.HasSequence("LawyerSequence");

            modelBuilder.HasSequence("MedicalHistorySequence");

            modelBuilder.HasSequence("PsychotherapySequence");

            modelBuilder.Entity("InteractHealthProDatabase.Models.AccidentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccidentDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccidentLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTimeAcc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmeAtSceneAmbulance")
                        .HasColumnType("bit");

                    b.Property<bool>("EmeAtSceneFirefighters")
                        .HasColumnType("bit");

                    b.Property<bool>("EmeAtSceneNoOneCame")
                        .HasColumnType("bit");

                    b.Property<bool>("EmeAtScenePolice")
                        .HasColumnType("bit");

                    b.Property<bool>("EmeAtSceneTowing")
                        .HasColumnType("bit");

                    b.Property<int?>("FMedVisit")
                        .HasColumnType("int");

                    b.Property<string>("MedicalHistoryUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoliceBadgeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PoliceCharge")
                        .HasColumnType("bit");

                    b.Property<string>("PoliceDept")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoliceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PoliceReportAccDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PoliceReportCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoadCondition")
                        .HasColumnType("int");

                    b.Property<bool>("TakeByAmbulance")
                        .HasColumnType("bit");

                    b.Property<int?>("Visibility")
                        .HasColumnType("int");

                    b.Property<int?>("Weather")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("AccidentDetails");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.AccidentVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccidentDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("AirbagDeploy")
                        .HasColumnType("bit");

                    b.Property<bool>("Anticipated")
                        .HasColumnType("bit");

                    b.Property<bool>("Bracing")
                        .HasColumnType("bit");

                    b.Property<int?>("DriverPosition")
                        .HasColumnType("int");

                    b.Property<bool>("DroveFrmScene")
                        .HasColumnType("bit");

                    b.Property<string>("InsuranceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MvaAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MvaAdjuster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MvaCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MvaClaimNo")
                        .HasColumnType("int");

                    b.Property<string>("MvaCoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MvaEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MvaFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MvaPC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MvaPolicyNo")
                        .HasColumnType("int");

                    b.Property<string>("MvaProv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MvaTel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLiableParties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seatbelt")
                        .HasColumnType("bit");

                    b.Property<int?>("TransportType")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleNoPeople")
                        .HasColumnType("int");

                    b.Property<string>("VehiclePersName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccidentDetailId");

                    b.HasIndex("License");

                    b.ToTable("AccidentVehicles");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Start");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.BodyPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccidentDetailId")
                        .HasColumnType("int");

                    b.Property<bool?>("AnkleL")
                        .HasColumnType("bit");

                    b.Property<bool?>("AnkleR")
                        .HasColumnType("bit");

                    b.Property<bool?>("ButtocksL")
                        .HasColumnType("bit");

                    b.Property<bool?>("ButtocksR")
                        .HasColumnType("bit");

                    b.Property<bool?>("ChestL")
                        .HasColumnType("bit");

                    b.Property<bool?>("ChestR")
                        .HasColumnType("bit");

                    b.Property<bool?>("Concussion")
                        .HasColumnType("bit");

                    b.Property<bool?>("DiscHerniation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ElbowL")
                        .HasColumnType("bit");

                    b.Property<bool?>("ElbowR")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceL")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaceR")
                        .HasColumnType("bit");

                    b.Property<bool?>("FingersL")
                        .HasColumnType("bit");

                    b.Property<bool?>("FingersR")
                        .HasColumnType("bit");

                    b.Property<bool?>("FootL")
                        .HasColumnType("bit");

                    b.Property<bool?>("FootR")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForearmL")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForearmR")
                        .HasColumnType("bit");

                    b.Property<bool?>("Fracture")
                        .HasColumnType("bit");

                    b.Property<bool?>("HandL")
                        .HasColumnType("bit");

                    b.Property<bool?>("HandR")
                        .HasColumnType("bit");

                    b.Property<bool?>("HeadB")
                        .HasColumnType("bit");

                    b.Property<bool?>("HeadF")
                        .HasColumnType("bit");

                    b.Property<bool?>("HeadL")
                        .HasColumnType("bit");

                    b.Property<bool?>("HeadR")
                        .HasColumnType("bit");

                    b.Property<bool?>("HipL")
                        .HasColumnType("bit");

                    b.Property<bool?>("HipR")
                        .HasColumnType("bit");

                    b.Property<bool?>("Jaw")
                        .HasColumnType("bit");

                    b.Property<bool?>("KneeL")
                        .HasColumnType("bit");

                    b.Property<bool?>("KneeR")
                        .HasColumnType("bit");

                    b.Property<bool?>("LowBack")
                        .HasColumnType("bit");

                    b.Property<bool?>("LowBackL")
                        .HasColumnType("bit");

                    b.Property<bool?>("LowBackR")
                        .HasColumnType("bit");

                    b.Property<bool?>("LowLegR")
                        .HasColumnType("bit");

                    b.Property<bool?>("LowLegRt")
                        .HasColumnType("bit");

                    b.Property<bool?>("MidBack")
                        .HasColumnType("bit");

                    b.Property<bool?>("MidBackL")
                        .HasColumnType("bit");

                    b.Property<bool?>("MidBackR")
                        .HasColumnType("bit");

                    b.Property<bool?>("Neck")
                        .HasColumnType("bit");

                    b.Property<bool?>("NumbLHand")
                        .HasColumnType("bit");

                    b.Property<bool?>("NumbLLeg")
                        .HasColumnType("bit");

                    b.Property<bool?>("NumbRHand")
                        .HasColumnType("bit");

                    b.Property<bool?>("NumbRLeg")
                        .HasColumnType("bit");

                    b.Property<bool?>("PainLArm")
                        .HasColumnType("bit");

                    b.Property<bool?>("PainLLeg")
                        .HasColumnType("bit");

                    b.Property<bool?>("PainRArm")
                        .HasColumnType("bit");

                    b.Property<bool?>("PainRLeg")
                        .HasColumnType("bit");

                    b.Property<bool?>("RibsL")
                        .HasColumnType("bit");

                    b.Property<bool?>("RibsR")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShoulderL")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShoulderR")
                        .HasColumnType("bit");

                    b.Property<bool?>("Teeth")
                        .HasColumnType("bit");

                    b.Property<bool?>("ThighL")
                        .HasColumnType("bit");

                    b.Property<bool>("ThighR")
                        .HasColumnType("bit");

                    b.Property<bool?>("TingLArm")
                        .HasColumnType("bit");

                    b.Property<bool?>("TingLLeg")
                        .HasColumnType("bit");

                    b.Property<bool?>("TingRArm")
                        .HasColumnType("bit");

                    b.Property<bool?>("TingRLeg")
                        .HasColumnType("bit");

                    b.Property<bool?>("ToesL")
                        .HasColumnType("bit");

                    b.Property<bool?>("ToesR")
                        .HasColumnType("bit");

                    b.Property<bool?>("UpArmL")
                        .HasColumnType("bit");

                    b.Property<bool?>("UpArmR")
                        .HasColumnType("bit");

                    b.Property<bool?>("UpBack")
                        .HasColumnType("bit");

                    b.Property<bool?>("UpBackL")
                        .HasColumnType("bit");

                    b.Property<bool?>("UpBackR")
                        .HasColumnType("bit");

                    b.Property<bool?>("UpLegL")
                        .HasColumnType("bit");

                    b.Property<bool?>("UpLegR")
                        .HasColumnType("bit");

                    b.Property<bool?>("WristL")
                        .HasColumnType("bit");

                    b.Property<bool?>("WristR")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccidentDetailId");

                    b.ToTable("BodyPart");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CaseRef")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("LawyerId")
                        .HasColumnType("int");

                    b.Property<string>("OtherRef")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LawyerId");

                    b.HasIndex("CaseRef", "OtherRef");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [ClientSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Referral")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactName", "Email", "CellPhone");

                    b.ToTable("Clients");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.ClientMVA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Accommodation")
                        .HasColumnType("int");

                    b.Property<int?>("AccommodationType")
                        .HasColumnType("int");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool?>("Consent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DominantHand")
                        .HasColumnType("bit");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Household")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interpreter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OHIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientMVA");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Concussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AbnormalAnxiety")
                        .HasColumnType("bit");

                    b.Property<bool?>("Amnesia")
                        .HasColumnType("bit");

                    b.Property<bool?>("AnticipateOthers")
                        .HasColumnType("bit");

                    b.Property<bool?>("Assert")
                        .HasColumnType("bit");

                    b.Property<bool?>("AttentionSpan")
                        .HasColumnType("bit");

                    b.Property<bool?>("Balance")
                        .HasColumnType("bit");

                    b.Property<bool?>("Blackouts")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool?>("Depression")
                        .HasColumnType("bit");

                    b.Property<bool?>("Dizziness")
                        .HasColumnType("bit");

                    b.Property<bool?>("Fatigue")
                        .HasColumnType("bit");

                    b.Property<bool?>("FinishTasks")
                        .HasColumnType("bit");

                    b.Property<bool?>("Forgetful")
                        .HasColumnType("bit");

                    b.Property<bool?>("HeadAches")
                        .HasColumnType("bit");

                    b.Property<bool?>("ImpairedJudgement")
                        .HasColumnType("bit");

                    b.Property<bool?>("Indifference")
                        .HasColumnType("bit");

                    b.Property<bool?>("LanguageDifficulty")
                        .HasColumnType("bit");

                    b.Property<bool?>("MentalFlex")
                        .HasColumnType("bit");

                    b.Property<bool?>("MentalStamina")
                        .HasColumnType("bit");

                    b.Property<bool?>("Mood")
                        .HasColumnType("bit");

                    b.Property<bool?>("Motivation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Nausea")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("NotesTimer")
                        .HasColumnType("bit");

                    b.Property<bool?>("Performance")
                        .HasColumnType("bit");

                    b.Property<bool?>("Personality")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProblemSolving")
                        .HasColumnType("bit");

                    b.Property<bool?>("Reactions")
                        .HasColumnType("bit");

                    b.Property<bool?>("Reading")
                        .HasColumnType("bit");

                    b.Property<bool?>("Rude")
                        .HasColumnType("bit");

                    b.Property<bool?>("Seizures")
                        .HasColumnType("bit");

                    b.Property<bool?>("Shallow")
                        .HasColumnType("bit");

                    b.Property<bool?>("Smell")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tasks")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tinitus")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tremors")
                        .HasColumnType("bit");

                    b.Property<bool?>("Verbal")
                        .HasColumnType("bit");

                    b.Property<bool?>("Vision")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Concussion");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Dependent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Person")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Wheelchair")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Dependent");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.HealthCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("HealthCompanies");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.HealthCompanyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [HealthCompanyContactSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCompanyId");

                    b.HasIndex("Title", "ContactName", "Telephone");

                    b.ToTable("HealthCompanyContacts");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.HealthFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("OtherRefNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TypeOfAppointment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("HealthCompanyId");

                    b.HasIndex("RefNo", "OtherRefNo");

                    b.ToTable("HealthFiles");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.InsuranceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Claimref")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("OtherClaimRef")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("Claimref", "OtherClaimRef");

                    b.ToTable("InsuranceClaims");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.InsuranceCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("InsuranceCompanies");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.InsuranceCompanyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [InsuranceCompanyContactSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceCompanyId");

                    b.ToTable("InsuranceCompanyContacts");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Lawyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [LawyerSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactName", "CellPhone");

                    b.ToTable("Lawyers");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.MedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [MedicalHistorySequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<bool>("Arthritis")
                        .HasColumnType("bit");

                    b.Property<bool>("Asthma")
                        .HasColumnType("bit");

                    b.Property<bool>("Cancer")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("bit");

                    b.Property<bool>("HeartStroke")
                        .HasColumnType("bit");

                    b.Property<bool>("Hospitalized")
                        .HasColumnType("bit");

                    b.Property<string>("HospitalizedCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("None")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<bool?>("Thyroid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("MedicalHistory");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.MedicalHistoryAccident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ambulance")
                        .HasColumnType("bit");

                    b.Property<bool?>("Attending")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfPatiant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Walkin")
                        .HasColumnType("bit");

                    b.Property<bool?>("Xray")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("MedicalHistoryAccident");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateDiagnosed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doseage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicalHistoryAccidentId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Treatment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryAccidentId");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cat")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Dog")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Psychotherapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [PsychotherapySequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AfraidDriving")
                        .HasColumnType("bit");

                    b.Property<bool?>("AfraidPassenger")
                        .HasColumnType("bit");

                    b.Property<bool?>("Apathy")
                        .HasColumnType("bit");

                    b.Property<bool?>("Avoidance")
                        .HasColumnType("bit");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DifficultyWActivities")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Flashbacks")
                        .HasColumnType("bit");

                    b.Property<bool?>("Irritable")
                        .HasColumnType("bit");

                    b.Property<bool?>("LowEnergy")
                        .HasColumnType("bit");

                    b.Property<bool?>("MemoryProblems")
                        .HasColumnType("bit");

                    b.Property<bool?>("NervousDepressed")
                        .HasColumnType("bit");

                    b.Property<bool?>("Nightmares")
                        .HasColumnType("bit");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RelationshipsAffected")
                        .HasColumnType("bit");

                    b.Property<bool?>("Restless")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sad")
                        .HasColumnType("bit");

                    b.Property<bool?>("SleepTrouble")
                        .HasColumnType("bit");

                    b.Property<bool?>("Stressed")
                        .HasColumnType("bit");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Psychotherapies");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.WorkHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("WorkHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.AccidentDetail", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.AccidentVehicle", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.AccidentDetail", "AccidentDetail")
                        .WithMany()
                        .HasForeignKey("AccidentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccidentDetail");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Appointment", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.BodyPart", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.AccidentDetail", "AccidentDetail")
                        .WithMany()
                        .HasForeignKey("AccidentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccidentDetail");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Case", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractHealthProDatabase.Models.Lawyer", "Lawyer")
                        .WithMany("Cases")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.ClientMVA", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Concussion", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Dependent", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.HealthCompanyContact", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.HealthCompany", "HealthCompany")
                        .WithMany()
                        .HasForeignKey("HealthCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCompany");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.HealthFile", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractHealthProDatabase.Models.HealthCompany", "HealthCompany")
                        .WithMany()
                        .HasForeignKey("HealthCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("HealthCompany");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.InsuranceClaim", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractHealthProDatabase.Models.InsuranceCompany", "InsuranceCompany")
                        .WithMany("InsuranceClaims")
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InsuranceCompany");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.InsuranceCompanyContact", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.InsuranceCompany", "InsuranceCompany")
                        .WithMany()
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceCompany");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.MedicalHistory", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.MedicalHistoryAccident", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Medication", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.MedicalHistoryAccident", "MedicalHistoryAccident")
                        .WithMany()
                        .HasForeignKey("MedicalHistoryAccidentId");

                    b.HasOne("InteractHealthProDatabase.Models.MedicalHistory", "MedicalHistory")
                        .WithMany()
                        .HasForeignKey("MedicalHistoryId");

                    b.Navigation("MedicalHistory");

                    b.Navigation("MedicalHistoryAccident");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Pet", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Psychotherapy", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.WorkHistory", b =>
                {
                    b.HasOne("InteractHealthProDatabase.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.InsuranceCompany", b =>
                {
                    b.Navigation("InsuranceClaims");
                });

            modelBuilder.Entity("InteractHealthProDatabase.Models.Lawyer", b =>
                {
                    b.Navigation("Cases");
                });
#pragma warning restore 612, 618
        }
    }
}
